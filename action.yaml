inputs:
  PREFIX_NAME:
    required: true
  IMAGE_TAG:
    required: true
  HELM_VALUES_ARG:
    required: true
  TIMEOUT:
    required: false
    default: "5m"
  ACTION:
    required: true

outputs:
  INGRESS_HOSTS_JSON:
    description: "JSON of Ingress hosts"
    value: ${{ steps.main.outputs.INGRESS_HOSTS_JSON }}

runs:
  using: "composite"
  steps:
    #- name: Checkout code
    #  uses: actions/checkout@v2

    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          helm:
            - 'helm/**'
    ## For debug only
    #- shell: bash
    #  run: |
    #    base64 <<EOF
    #    ${{ toJSON(inputs) }}
    #    EOF
    #- shell: bash
    #  run: |
    #    env | sort
    - shell: bash
      id: main
      run: |
        set -ex
        export PREFIX_NAME=${{ inputs.PREFIX_NAME }}

        # set helm values file
        if [ -f helm/chart/values.yaml ]; then
          HELM_ARG="$HELM_ARG -f helm/chart/values.yaml"
        fi
        if [ -f helm/chart/values-$PREFIX_NAME.yaml ]; then
          HELM_ARG="$HELM_ARG -f helm/chart/values-$PREFIX_NAME.yaml"
        else
          if [ -f helm/chart/values-pullrequest.yaml ]; then
            HELM_ARG="$HELM_ARG -f helm/chart/values-pullrequest.yaml"
          fi
        fi

        # HELM chart information
        if [ ! -f helm/chart/HELM_ENV ]; then
          echo "helm/chart/HELM_ENV is missing, using local chart instead" 1>&2
          HELM_CHART_NAME=helm/chart/
        else
          source helm/chart/HELM_ENV
          if [ -z "$HELM_CHART_REPO" ]; then
            echo "Missing HELM_CHART_REPO in helm/chart/HELM_ENV file" 1>&2
            exit 1
          fi
          if [ -z "$HELM_CHART_NAME" ]; then
            echo "Missing HELM_CHART_NAME in helm/chart/HELM_ENV file" 1>&2
            exit 1
          fi
          if [ -z "$HELM_CHART_VERSION" ]; then
            echo "Missing HELM_CHART_VERSION in helm/chart/HELM_ENV file" 1>&2
            exit 1
          fi
        fi
        
        if [ -n "$HELM_CHART_REPO" ] ; then
          helm repo add repo $HELM_CHART_REPO
          HELM_CHART_OPTIONS="repo/$HELM_CHART_NAME --version $HELM_CHART_VERSION"
        else
          HELM_CHART_OPTIONS="$HELM_CHART_NAME"
          helm dependency build $HELM_CHART_NAME
        fi
        
        if [ "${{ inputs.ACTION }}" == "install" ]; then
          # test access
          kubectl get pods
          echo "Current installed releases in namespace :"
          helm list
          cat helm/chart/values*.yaml
          echo "Installing/Updating release :"
          if ! helm upgrade --install ${{ inputs.PREFIX_NAME }} $HELM_CHART_OPTIONS --atomic --debug --wait --timeout ${{ inputs.TIMEOUT }} \
              ${{ inputs.HELM_VALUES_ARG }} \
              $HELM_ARG ; then
            echo "Deployment has failed !"
            echo "Here are the last events to help diagnose the problem :"
            kubectl get events --sort-by .metadata.creationTimestamp
            exit 1
          fi
          echo "Deployment successfull"
          # getting Ingress hosts :
          INGRESS_HOSTS_JSON=$(helm get manifest ${{ inputs.PREFIX_NAME }} | yq ea '[. | select(.kind=="Ingress") | .spec.rules[].host ]' --output-format=json -I 0)
          echo "::set-output name=INGRESS_HOSTS_JSON::$INGRESS_HOSTS_JSON"
        fi
        
        if [ "${{ inputs.ACTION }}" == "uninstall" ]; then
          # test access
          kubectl get pods
          echo "Current installed releases in namespace :"
          helm list
          echo "Uninstalling release ${{ inputs.PREFIX_NAME }}"
          if ! helm uninstall ${{ inputs.PREFIX_NAME }} --wait ; then
            echo "HELM Uninstall has failed !"
            echo "Please ask the SRE team to manually clean remaining objects"
            exit 1
          fi
          echo "HELM uninstall successfull"
        fi
        
        if [ "${{ inputs.ACTION }}" == "check" ]; then
          helm template $HELM_CHART_OPTIONS \
            ${{ inputs.HELM_VALUES_ARG }} \
            $HELM_ARG | yq e -s '"yq_tmp_" + $index' -
          for file in yq_tmp_*.yml; do
            echo "Checking if metadata.name is prefixed by release name on $(yq e '.kind + "/" + .metadata.name' $file)"
            yq -C --exit-status e '.metadata.name | test("release-name-")' $file
            # TODO: add more checks
            # TODO: liveness/readiness on all apps
          done
          rm yq_tmp_*.yml
        fi















