inputs:
  PREFIX_NAME:
    required: true
  IMAGE_TAG:
    required: true
  HELM_VALUES_ARG:
    required: true
  TIMEOUT:
    required: false
    default: "5m"
  HELM_CHART_NAME:
    required: true
  HELM_CHART_REPO:
    required: true
  HELM_CHART_VERSION:
    required: true
  ACTION:
    required: true
#outputs:
#  prefix_name:
#    description: "release/db prefix"
#    value: ${{ steps.main.outputs.prefix_name }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          helm:
            - 'helm/**'
    ## For debug only
    #- shell: bash
    #  run: |
    #    base64 <<EOF
    #    ${{ toJSON(inputs) }}
    #    EOF
    #- shell: bash
    #  run: |
    #    env | sort
    - shell: bash
      id: main
      run: |
        set -e

        
        if [ "${{ inputs.ACTION }}" == "install" ]; then
          # test access
          kubectl get pods
          echo "Current installed releases in namespace :"
          helm list
          helm repo add repo ${{ inputs.HELM_CHART_REPO }}
          echo "Installing/Updating release :"
          if ! helm upgrade --install ${{ inputs.PREFIX_NAME }} repo/${{ inputs.HELM_CHART_NAME }} --version ${{ inputs.HELM_CHART_VERSION }} --atomic --debug --wait --timeout ${{ inputs.TIMEOUT }} \
              ${{ inputs.HELM_VALUES_ARG }} \
              --set wordpress.image.tag=${{ inputs.IMAGE_TAG }} \
              --set frontend.image.tag=${{ inputs.IMAGE_TAG }} \
            ; then
            echo "Deployment has failed !"
            echo "Here are the last events to help diagnose the problem :"
            kubectl get events --sort-by .metadata.creationTimestamp
            exit 1
          fi
          echo "Deployment successfull"
        fi
        
        if [ "${{ inputs.ACTION }}" == "uninstall" ]; then
          # test access
          kubectl get pods
          echo "Current installed releases in namespace :"
          helm list
          echo "Uninstalling release ${{ inputs.PREFIX_NAME }}"
          if ! helm uninstall ${{ inputs.PREFIX_NAME }} --wait ; then
            echo "HELM Uninstall has failed !"
            echo "Please ask the SRE team to manually clean remaining objects"
            exit 1
          fi
          echo "HELM uninstall successfull"
        fi
        
        if [ "${{ inputs.ACTION }}" == "check"]; then
          helm repo add repo ${{ steps.deploy_set_env.outputs.HELM_CHART_REPO }}
          helm template repo/${{ steps.deploy_set_env.outputs.HELM_CHART_NAME}} --version ${{ steps.deploy_set_env.outputs.HELM_CHART_VERSION }} ${{ steps.deploy_set_env.outputs.HELM_VALUES_ARG }} | yq e -s '"yq_tmp_" + $index' -
          for file in yq_tmp_*.yml; do
          echo "Checking if metadata.name is prefixed by release name on $(yq e '.kind + "/" + .metadata.name' $file)"
          yq -C --exit-status e '.metadata.name | test("release-name-")' $file
          # TODO: add more checks
          # TODO: liveness/readiness on all apps
          done
          rm yq_tmp_*.yml
        fi
















